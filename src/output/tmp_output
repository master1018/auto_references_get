REFERENCES
[1] Last Accessed: May. 2019. Defecst4J. https://github.com/rjust/defects4j/releases/
[2] Last Accessed: May. 2019. PAR Fix Templates. https://sites.google.com/site/autofixhkust/home/fix-templates.tag/v1.2.0.
[3] Last Accessed: May. 2019. Program Repair. http://program-repair.org.
[4] Rui Abreu, Arjan JC Van Gemund, and Peter Zoeteweij. 2007. On the accuracy ofspectrum-based fault localization. In Testing: Academic and Industrial ConferencePractice and Research Techniques - MUTATION. IEEE, 89–98.
[5] Rui Abreu, Peter Zoeteweij, Rob Golsteijn, and Arjan JC Van Gemund. 2009. Apractical evaluation of spectrum-based fault localization. Journal of Systems andSoftware 82, 11 (2009), 1780–1792.
[6] Rui Abreu, Peter Zoeteweij, and Arjan JC Van Gemund. 2009. Spectrum-basedmultiple fault localization. In Proceedings of the 24th International Conference onAutomated Software Engineering. IEEE, 88–99.
[7] Sahil Bhatia, Pushmeet Kohli, and Rishabh Singh. 2018. Neuro-symbolic programcorrector for introductory programming assignments. In Proceedings of the 40thInternational Conference on Software Engineering. ACM, 60–70.
[8] Tom Britton, Lisa Jeng, Graham Carver, Paul Cheak, and Tomer Katzenellenbo-gen. 2013. Reversible debugging software. Judge Bus. School, Univ. Cambridge,Cambridge, UK, Tech. Rep (2013).
[9] José Campos, André Riboira, Alexandre Perez, and Rui Abreu. 2012. Gzoltar: aneclipse plug-in for testing and debugging. In Proceedings of the 27th IEEE/ACMInternational Conference on Automated Software Engineering. IEEE/ACM, 378–381.
[10] Liushan Chen, Yu Pei, and Carlo A Furia. 2017. Contract-based program re-pair without the contracts. In Proceedings of the 32nd IEEE/ACM InternationalConference on Automated Software Engineering. IEEE, 637–647.
[11] Zack Coker and Munawar Hafiz. 2013. Program transformations to fix C inte-gers. In Proceedings of the 35th IEEE/ACM International Conference on SoftwareEngineering. IEEE/ACM, 792–801.
[12] Kinga Dobolyi and Westley Weimer. 2008. Changing java’s semantics for handlingnull pointer exceptions. In Proceedings of the 19th International Symposium onSoftware Reliability Engineering. IEEE, 47–56.
[13] Thomas Durieux, Benoit Cornu, Lionel Seinturier, and Martin Monperrus. 2017.Dynamic patch generation for null pointer exceptions using metaprogramming.In Proceedings of the 24th International Conference on Software Analysis, Evolutionand Reengineering. IEEE, 349–358.
[14] Jean-Rémy Falleri, Floréal Morandat, Xavier Blanc, Matias Martinez, and MartinMonperrus. 2014. Fine-grained and accurate source code differencing. In Pro-ceedings of the 29th ACM/IEEE International Conference on Automated SoftwareEngineering. ACM, 313–324.
[15] Ali Ghanbari and Lingming Zhang. 2018. Practical program repair via bytecodemutation. arXiv preprint arXiv:1807.03512 (2018).
[16] Rahul Gupta, Soham Pal, Aditya Kanade, and Shirish Shevade. 2017. DeepFix:Fixing Common C Language Errors by Deep Learning. In Proceedings of the 31stAAAI Conference on Artificial Intelligence. AAAI Press, 1345–1351.
[17] Jinru Hua, Mengshi Zhang, Kaiyuan Wang, and Sarfraz Khurshid. 2018. Towardspractical program repair with on-demand candidate generation. In Proceedings ofthe 40th International Conference on Software Engineering. ACM, 12–23.
[18] Jiajun Jiang, Yingfei Xiong, Hongyu Zhang, Qing Gao, and Xiangqun Chen.2018. Shaping Program Repair Space with Existing Patches and Similar Code.In Proceedings of the 27th ACM SIGSOFT International Symposium on SoftwareTesting and Analysis. ACM, 298–309.
[19] James A Jones and Mary Jean Harrold. 2005. Empirical evaluation of the taran-tula automatic fault-localization technique. In Proceedings of the 20th IEEE/ACMinternational Conference on Automated software engineering. ACM, 273–282.
[20] René Just, Darioush Jalali, and Michael D Ernst. 2014. Defects4J: A database ofexisting faults to enable controlled testing studies for Java programs. In Proceed-ings of the 23rd ACM SIGSOFT International Symposium on Software Testing andAnalysis. ACM, 437–440.
[21] Yalin Ke, Kathryn T Stolee, Claire Le Goues, and Yuriy Brun. 2015. Repairingprograms with semantic code search (t). In Proceedings of the 30th IEEE/ACMInternational Conference on Automated Software Engineering. IEEE, 295–306.
[22] Stephen W Kent. 2008. Dynamic error remediation: A case study with null pointerexceptions. University of Texas Master’s Thesis (2008).
[23] Dongsun Kim, Jaechang Nam, Jaewoo Song, and Sunghun Kim. 2013. Automaticpatch generation learned from human-written patches. In Proceedings of the 35thInternational Conference on Software Engineering. IEEE, 802–811.
[24] Anil Koyuncu, Kui Liu, Tegawendé F. Bissyandé, Dongsun Kim, Jacques Klein,Martin Monperrus, and Yves Le Traon. 2018. FixMiner: Mining Relevant FixPatterns for Automated Program Repair. arXiv preprint arXiv:1810.01791 (2018).
[25] Xuan-Bach D Le, Duc-Hiep Chu, David Lo, Claire Le Goues, and Willem Visser.2017. S3: syntax-and semantic-guided repair synthesis via programming byexamples. In Proceedings of the 11th Joint Meeting on Foundations of SoftwareEngineering. ACM, 593–604.
[26] Xuan-Bach D Le, Quang Loc Le, David Lo, and Claire Le Goues. 2016. Enhancingautomated program repair with deductive verification. In Proceedings of the 32ndInternational Conference on Software Maintenance and Evolution. IEEE, 428–432.
[27] Xuan Bach D Le, Ferdian Thung, David Lo, and Claire Le Goues. 2018. Overfittingin semantics-based automated program repair. Empirical Software Engineering(2018), 1–27.
[28] Xuan-Bach D. Le, Lingfeng Bao, David Lo, Xin Xia, and Shanping Li. 2019. On Re-liability of Patch Correctness Assessment. In Proceedings of the 41th InternationalConference on Software Engineering.
[29] Xuan-Bach D. Le, David Lo, and Claire Le Goues. 2016. History Driven ProgramRepair. In Proceedings of the 23rd International Conference on Software Analysis,Evolution, and Reengineering, Vol. 1. IEEE, 213–224.
[30] Claire Le Goues, Michael Dewey-Vogt, Stephanie Forrest, and Westley Weimer.2012. A systematic study of automated program repair: Fixing 55 out of 105bugs for $8 each. In Proceedings of the 34th International Conference on SoftwareEngineering. IEEE, 3–13.
[31] Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. 2012.GenProg: A generic method for automatic software repair. IEEE Transactions onSoftware Engineering 38, 1 (2012), 54–72.
[32] Ben Liblit, Mayur Naik, Alice X Zheng, Alex Aiken, and Michael I Jordan. 2005.Scalable statistical bug isolation. In Proceedings of the ACM SIGPLAN 2005 Con-ference on Programming Language Design and Implementation. ACM, 15–26.
[33] Chao Liu, Long Fei, Xifeng Yan, Jiawei Han, and Samuel P Midkiff. 2006. Statisticaldebugging: A hypothesis testing-based approach. IEEE Transactions on SoftwareEngineering 32, 10 (2006), 831–848.
[34] Kui Liu, Koyuncu Anil, Kisub Kim, Dongsun Kim, and Tegawendé F. Bissyandé.2018. LSRepair: Live Search of Fix Ingredients for Automated Program Repair. InProceedings of the 25th Asia-Pacific Software Engineering Conference. 658–662.
[35] Kui Liu, Dongsun Kim, Tegawendé F Bissyandé, Shin Yoo, and Yves Le Traon.2018. Mining fix patterns for findbugs violations. IEEE Transactions on SoftwareEngineering (2018).
[36] Kui Liu, Dongsun Kim, Tegawendé François D Assise Bissyande, Taeyoung Kim,Kisub Kim, Anil Koyuncu, Suntae Kim, and Yves Le Traon. 2019. Learning to Sportand Refactor Inconsistent Method Names. In Proceedings of the 41st ACM/IEEEInternational Conference on Software Engineering. IEEE.
[37] Kui Liu, Dongsun Kim, Anil Koyuncu, Li Li, Tegawendé F Bissyandé, and YvesLe Traon. 2018. A closer look at real-world patches. In Proceedings of the 34thInternational Conference on Software Maintenance and Evolution. IEEE, 275–286.
[38] Kui Liu, Anil Koyuncu, Tegawendé F. Bissyandé, Dongsun Kim, Jacques Klein,and Yves Le Traon. 2019. You Cannot Fix What You Cannot Find! An Investi-gation of Fault Localization Bias in Benchmarking Automated Program RepairSystems. In Proceedings of the 12th IEEE International Conference on SoftwareTesting, Verification and Validation. IEEE.
[39] Kui Liu, Anil Koyuncu, Dongsun Kim, and Tegawendé F. Bissyandé. 2019.AVATAR : Fixing Semantic Bugs with Fix Patterns of Static Analysis Violations.In Proceedings of the 26th IEEE International Conference on Software Analysis,Evolution and Reengineering. IEEE.
[40] Xuliang Liu and Hao Zhong. 2018. Mining stackoverflow for program repair. InProceedings of the 25th International Conference on Software Analysis, Evolutionand Reengineering. IEEE, 118–129.
[41] Fan Long, Peter Amidon, and Martin Rinard. 2017. Automatic inference of codetransforms for patch generation. In Proceedings of the 11th Joint Meeting onFoundations of Software Engineering. ACM, 727–739.
[42] Fan Long and Martin Rinard. 2015. Staged program repair with condition synthe-sis. In Proceedings of the 10th Joint Meeting on Foundations of Software Engineering.ACM, 166–178.
[43] Fan Long and Martin Rinard. 2016. An analysis of the search spaces for generateand validate patch generation systems. In Proceedings of the 38th InternationalConference on Software Engineering. ACM, 702–713.
[44] Fan Long and Martin Rinard. 2016. Automatic patch generation by learningcorrect code. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposiumon Principles of Programming Languages. ACM, 298–312.
[45] Fan Long, Stelios Sidiroglou-Douskos, and Martin Rinard. 2014. Automaticruntime error repair and containment via recovery shepherding. In Proceedingsof the 35th ACM SIGPLAN Conference on Programming Language Design andImplementation, Vol. 49. ACM, 227–238.
[46] Fernanda Madeiral, Simon Urli, Marcelo Maia, and Martin Monperrus. 2019.Bears: An Extensible Java Bug Benchmark for Automatic Program Repair Studies.In Proceedings of the IEEE 26th International Conference on Software Analysis,Evolution and Reengineering. IEEE, 468–478.
[47] Xiaoguang Mao, Yan Lei, Ziying Dai, Yuhua Qi, and Chengsong Wang. 2014.Slice-based statistical fault localization. Journal of Systems and Software 89 (2014),51–62.
[48] Matias Martinez and Martin Monperrus. 2015. Mining software repair models forreasoning on the search space of automated program fixing. Empirical SoftwareEngineering 20, 1 (2015), 176–205.
[49] Matias Martinez and Martin Monperrus. 2016. Astor: A program repair libraryfor java. In Proceedings of the 25th International Symposium on Software Testingand Analysis. ACM, 441–444.ISSTA ’19, July 15–19, 2019, Beijing, ChinaKui Liu, Anil Koyuncu, Dongsun Kim, Tegawendé F. Bissyandé
[50] Matias Martinez and Martin Monperrus. 2018. Ultra-Large Repair Search Spacewith Automatically Mined Templates: The Cardumen Mode of Astor. In Pro-ceedings of the International Symposium on Search Based Software Engineering.Springer, 65–86.
[51] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2015. Directfix: Lookingfor simple program repairs. In Proceedings of the 37th International Conference onSoftware Engineering-Volume 1. IEEE Press, 448–458.
[52] Martin Monperrus. 2018. Automatic software repair: a bibliography. Comput.Surveys 51, 1 (2018), 17:1–17:24.
[53] Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chan-dra. 2013. SemFix: program repair via semantic analysis. In Proceedings of the35th International Conference on Software Engineering. IEEE, 772–781.
[54] NIST. Last Accessed: Jan. 2019.. Software Errors Cost U.S. Economy $59.5 BillionAnnually. http://www.abeacha.com/NIST_press_release_bugs_cost.htm.
[55] Kai Pan, Sunghun Kim, and E James Whitehead. 2009. Toward an understandingof bug fix patterns. Empirical Software Engineering 14, 3 (2009), 286–315.
[56] Spencer Pearson, José Campos, René Just, Gordon Fraser, Rui Abreu, Michael DErnst, Deric Pang, and Benjamin Keller. 2017. Evaluating and improving faultlocalization. In Proceedings of the 39th International Conference on Software Engi-neering. IEEE/ACM, 609–620.
[57] Alexandre Perez, Rui Abreu, and Arie van Deursen. 2017. A test-suite diagnos-ability metric for spectrum-based fault localization approaches. In Proceedings ofthe 39th International Conference on Software Engineering. IEEE/ACM, 654–664.
[58] Zichao Qi, Fan Long, Sara Achour, and Martin Rinard. 2015. An analysis of patchplausibility and correctness for generate-and-validate patch generation systems.In Proceedings of the 24th ACM SIGSOFT International Symposium on SoftwareTesting and Analysis. ACM, 24–36.
[59] Reudismam Rolim, Gustavo Soares, Loris D’Antoni, Oleksandr Polozov, SumitGulwani, Rohit Gheyi, Ryo Suzuki, and Björn Hartmann. 2017. Learning syntacticprogram transformations from examples. In Proceedings of the 39th IEEE/ACMInternational Conference on Software Engineering. IEEE/ACM, 404–415.
[60] Reudismam Rolim, Gustavo Soares, Rohit Gheyi, and Loris D’Antoni. 2018. Learn-ing Quick Fixes from Code Repositories. arXiv preprint arXiv:1803.03806 (2018).
[61] Ripon Saha, Yingjun Lyu, Wing Lam, Hiroaki Yoshida, and Mukul Prasad. 2018.Bugs.jar: a large-scale, diverse dataset of real-world java bugs. In Proceedingsof the IEEE/ACM 15th International Conference on Mining Software Repositories.IEEE, 10–13.
[62] Ripon K Saha, Yingjun Lyu, Hiroaki Yoshida, and Mukul R Prasad. 2017. ELIXIR:Effective object-oriented program repair. In Proceedings of the 32nd IEEE/ACMInternational Conference on Automated Software Engineering. IEEE, 648–659.
[63] Edward K Smith, Earl T Barr, Claire Le Goues, and Yuriy Brun. 2015. Is the cureworse than the disease? Overfitting in automated program repair. In Proceedingsof the 10th Joint Meeting on Foundations of Software Engineering. ACM, 532–543.
[64] Mauricio Soto and Claire Le Goues. 2018. Using a probabilistic model to predictbug fixes. In Proceedings of the 25th International Conference on Software Analysis,Evolution and Reengineering. IEEE, 221–231.
[65] Friedrich Steimann, Marcus Frenkel, and Rui Abreu. 2013. Threats to the validityand value of empirical assessments of the accuracy of coverage-based faultlocators. In Proceedings of the 2013 International Symposium on Software Testingand Analysis. ACM, 314–324.
[66] Yi Wei, Yu Pei, Carlo A Furia, Lucas S Silva, Stefan Buchholz, Bertrand Meyer,and Andreas Zeller. 2010. Automated fixing of programs with contracts. InProceedings of the 19th international symposium on Software testing and analysis.ACM, 61–72.
[67] Westley Weimer, ThanhVu Nguyen, Claire Le Goues, and Stephanie Forrest. 2009.Automatically finding patches using genetic programming. In Proceedings of the31st International Conference on Software Engineering. IEEE, 364–374.
[68] Ming Wen, Junjie Chen, Rongxin Wu, Dan Hao, and Shing-Chi Cheung. 2017.An empirical analysis of the influence of fault space on search-based automatedprogram repair. arXiv preprint arXiv:1707.05172 (2017).
[69] Ming Wen, Junjie Chen, Rongxin Wu, Dan Hao, and Shing-Chi Cheung. 2018.Context-Aware Patch Generation for Better Automated Program Repair. In Pro-ceedings of the 40th IEEE/ACM International Conference on Software Engineering.IEEE/ACM, 1–11.
[70] Martin White, Michele Tufano, Matias Martinez, Martin Monperrus, and DenysPoshyvanyk. 2019. Sorting and Transforming Program Repair Ingredients viaDeep Learning Code Similarities. In Proceedings of the 26th IEEE InternationalConference on Software Analysis, Evolution and Reengineering. IEEE.
[71] W Eric Wong, Vidroha Debroy, and Byoungju Choi. 2010. A family of codecoverage-based heuristics for effective fault localization. Journal of Systems andSoftware 83, 2 (2010), 188–208.
[72] W Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. Asurvey on software fault localization. IEEE Transactions on Software Engineering42, 8 (2016), 707–740.
[73] Xiaoyuan Xie, Tsong Yueh Chen, Fei-Ching Kuo, and Baowen Xu. 2013. Atheoretical analysis of the risk evaluation formulas for spectrum-based faultlocalization. ACM Transactions on Software Engineering and Methodology 22, 4(2013), 31:1–31:40.
[74] Qi Xin and Steven P Reiss. 2017. Leveraging syntax-related code for automatedprogram repair. In Proceedings of the 32nd IEEE/ACM International Conference onAutomated Software Engineering. IEEE/ACM, 660–670.
[75] Yingfei Xiong, Xinyuan Liu, Muhan Zeng, Lu Zhang, and Gang Huang. 2018.Identifying patch correctness in test-based program repair. In Proceedings of the40th International Conference on Software Engineering. ACM, 789–799.
[76] Yingfei Xiong, Jie Wang, Runfa Yan, Jiachen Zhang, Shi Han, Gang Huang, andLu Zhang. 2017. Precise condition synthesis for program repair. In Proceedings ofthe 39th IEEE/ACM International Conference on Software Engineering. IEEE/ACM,416–426.
[77] Jifeng Xuan, Matias Martinez, Favio DeMarco, Maxime Clement, Sebastian Lame-las Marcote, Thomas Durieux, Daniel Le Berre, and Martin Monperrus. 2017.Nopol: Automatic repair of conditional statement bugs in java programs. IEEETransactions on Software Engineering 43, 1 (2017), 34–55.
[78] Jifeng Xuan and Martin Monperrus. 2014. Learning to combine multiple rankingmetrics for fault localization. In Proceedings of the 30th International Conferenceon Software Maintenance and Evolution. IEEE, 191–200.
[79] Jifeng Xuan and Martin Monperrus. 2014. Test case purification for improv-ing fault localization. In Proceedings of the 22nd ACM SIGSOFT InternationalSymposium on Foundations of Software Engineering. ACM, 52–63.
[80] Xiangyu Zhang, Neelam Gupta, and Rajiv Gupta. 2006. Locating faults throughautomated predicate switching. In Proceedings of the 28th International Conferenceon Software Engineering. ACM, 272–281.
[81] Hao Zhong and Zhendong Su. 2015. An empirical study on real bug fixes. In Pro-ceedings of the 37th IEEE/ACM International Conference on Software Engineering-Volume 1. IEEE/ACM, 913–923.
